import gradio as gr
from pathlib import Path
from PIL import Image
import time
import psutil
import subprocess

SYSTEM_PROMPT = '''
–í—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç OCR , –∫–æ—Ç–æ—Ä—ã–π –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Ä—É—Å—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–Ω—ã—Ö —ç—Ç–∏–∫–µ—Ç–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö. –í —Ç–µ–∫—Å—Ç–µ –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.
'''

USER_PROMPT = '''
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∏—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. 
'''

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Unsloth –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
unsloth_processor = None

try:
    from qwen_processor import QwenUnslothProcessor
    unsloth_processor = QwenUnslothProcessor()
    print("‚úÖ Unsloth –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Unsloth –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ unsloth —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def get_system_info():
    ram = psutil.virtual_memory()
    cpu = psutil.cpu_percent(interval=0.5)
    ram_info = f"üß† RAM: {ram.used // (1024**2)} MiB / {ram.total // (1024**2)} MiB"
    cpu_info = f"‚öôÔ∏è CPU: {cpu}%"

    try:
        result = subprocess.run(
            ['nvidia-smi', '--query-gpu=memory.used,memory.total', '--format=csv,noheader,nounits'],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )
        used, total = result.stdout.strip().split(', ')
        gpu_info = f"üñ•Ô∏è GPU: {used} MiB / {total} MiB"
    except:
        gpu_info = "üñ•Ô∏è GPU: –ù–µ –Ω–∞–π–¥–µ–Ω–æ"

    return f"{cpu_info}\n{ram_info}\n{gpu_info}"

def chat_with_qwen(system_prompt, user_prompt, image: Image, selected_model, temperature=0.2):
    start_time = time.time()
    
    try:
        if unsloth_processor is not None:
            result = unsloth_processor.process(
                system_prompt=system_prompt,
                user_prompt=user_prompt,
                image=image,
                selected_model=selected_model,
                temperature=temperature
            )
        else:
            result = "–û—à–∏–±–∫–∞: Unsloth –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É unsloth."
    except Exception as e:
        result = f"–û—à–∏–±–∫–∞: {str(e)}"
    
    elapsed_time = time.time() - start_time
    return result, f"{elapsed_time:.2f} —Å–µ–∫—É–Ω–¥"

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
if unsloth_processor is not None:
    available_models = list(unsloth_processor.get_available_models())
else:
    available_models = []

with gr.Blocks() as demo:
    gr.Markdown("## Qwen Unsloth –°–µ—Ä–≤–∏—Å")
    sysinfo = gr.Markdown()

    with gr.Row():
        with gr.Column():
            system_prompt = gr.Textbox(label="–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", value=SYSTEM_PROMPT)
            user_prompt = gr.Textbox(label="–í–∞—à –∑–∞–ø—Ä–æ—Å", value=USER_PROMPT)
            image = gr.Image(type="pil", label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
            
            model = gr.Dropdown(
                choices=available_models, 
                value=available_models[0] if available_models else None,
                label="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å"
            )
            
            temperature = gr.Slider(minimum=0, maximum=1, step=0.05, value=0.2, label="Temperature")
            btn = gr.Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", interactive=len(available_models) > 0)
        
        with gr.Column():
            result = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç")
            duration = gr.Textbox(label="–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    if available_models:
        btn.click(
            fn=chat_with_qwen,
            inputs=[system_prompt, user_prompt, image, model, temperature],
            outputs=[result, duration]
        )
    else:
        gr.Markdown("‚ùå Unsloth –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.")

    demo.load(get_system_info, outputs=sysinfo)

if __name__ == "__main__":
    demo.launch(server_name="0.0.0.0", server_port=7860, share=False)
