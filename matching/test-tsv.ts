import { ProductRepository } from './src/repositories/product.repository';

async function testTsvLoading() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É TSV —Ñ–∞–π–ª–∞...');
    
    const repository = new ProductRepository();
    const products = await repository.getAllProducts();
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}`);
    console.log('\nüì¶ –ü–µ—Ä–≤—ã–µ 5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤:');
    products.slice(0, 5).forEach((product, index) => {
      console.log(`${index + 1}. SKU: ${product.sku} | –û–ø–∏—Å–∞–Ω–∏–µ: ${product.description}`);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É "iPhone":');
    const searchResults = await repository.findProductsByQuery('iPhone');
    console.log(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${searchResults.length}`);
    searchResults.forEach((product, index) => {
      console.log(`${index + 1}. SKU: ${product.sku} | –û–ø–∏—Å–∞–Ω–∏–µ: ${product.description}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ TSV:', error);
    if (error instanceof Error) {
      console.error('Stack trace:', error.stack);
    }
  }
}

testTsvLoading();
